Resources:

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP and HTTPS access
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0

  EC2Instance1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-05552d2dcf89c9b24
      SecurityGroups:
      - !Ref EC2SecurityGroup

  EC2Instance2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-05552d2dcf89c9b24
      SecurityGroups:
      - !Ref EC2SecurityGroup

  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: ArcPayDB
      AllocatedStorage: '5'
      DBInstanceClass: db.t3.micro
      Engine: postgres
      MasterUsername: blake
      MasterUserPassword: password1234  # TODO: use a hidden parameter

  RabbitMQBroker:
    Type: "AWS::AmazonMQ::Broker"
    Properties:
      BrokerName: MyRabbitMQBroker
      EngineType: RABBITMQ
      EngineVersion: '3.8.6' # You can set this to your desired version
      DeploymentMode: SINGLE_INSTANCE # For cost saving, but consider CLUSTER for production
      HostInstanceType: mq.t3.micro
      PubliclyAccessible: true
      AutoMinorVersionUpgrade: true
      Logs:
        General: true
      Users:
      - Username: blake
        Password: password1234  # TODO: use a hidden parameter

  RabbitMQSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable RabbitMQ access
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '5672'
        ToPort: '5672'
        CidrIp: 0.0.0.0/0

  SecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt RabbitMQSecurityGroup.GroupId
      IpProtocol: -1
      CidrIp: 0.0.0.0/0
